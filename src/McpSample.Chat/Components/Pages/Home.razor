@page "/"
@using Azure
@using Azure.AI.OpenAI
@using Azure.Identity
@using Microsoft.Extensions.AI
@using Microsoft.Extensions.Configuration
@using System.Text.RegularExpressions
@using ModelContextProtocol.Client
@using System.Text
@inject IMcpClient McpClient
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>Chat - MCP</PageTitle>

<link href="css/Home.css" rel="stylesheet" />

<div class="chat-container">
    <div class="chat-bubble assistant">
        <div class="chat-title">Chat com um MCP Server</div>
        <div class="chat-content">
            <p>Oi, eu sou um cliente MCP usando o modelo <b>[@nomeModelo]</b> com <b>[@modoClient]</b></p>
            <p>Vá no menu Configurações para usar outros modelos como GitHub Models, Ollama, Azure AI ou utilizar configurações personalizadas.</p>
        </div>
        <div class="chat-title">MCP Tools disponíveis:</div>
        <div class="chat-content">
            @if (tools is not null)
                foreach (var tool in tools)
                {
                    <p>- <b>@tool.Name</b>: @tool.Description</p>
                }
        </div>
    </div>

    @foreach (var message in mensagensChat)
    {
        string chatBubbleClass = string.Empty;
        string messageContent = string.Empty;
        string messageThink = string.Empty;
        string messageTitle = string.Empty;
        string functionResponse = string.Empty;
        var functionCallId = string.Empty;

        messageContent = message?.Text ?? string.Empty;

        if (message.Role == ChatRole.User)
        {
            messageTitle = "Usuário";
            chatBubbleClass = "chat-bubble user";
        }
        if (message.Role == ChatRole.Assistant)
        {
            messageTitle = "Assistente";
            chatBubbleClass = "chat-bubble assistant";

            // in case of using a reasoning model
            var match = Regex.Match(messageContent, @"<think>(.*?)<\/think>(.*)", RegexOptions.Singleline);
            if (match.Success)
            {
                messageThink = match.Groups[1].Value.Trim();
                messageContent = match.Groups[2].Value.Trim();
            }
        }
        if (message.Role == ChatRole.System)
        {
            messageContent = string.Empty;
        }

        if (message.Role == ChatRole.Tool)
        {
            messageTitle = "Tool";
            messageContent = string.Empty;
            chatBubbleClass = "chat-bubble tool";
            if (message.Contents.FirstOrDefault() is FunctionResultContent functionResult)
            {
                functionResponse = functionResult.Result.ToString();
                functionCallId = $"Call Id: {functionResult.CallId}";
            }
        }

        if (!string.IsNullOrEmpty(messageContent) || messageTitle == "Tool")
        {
            <div class="@chatBubbleClass">
                @if (string.IsNullOrEmpty(functionResponse))
                {
                    <div class="chat-title">@messageTitle</div>
                    <div class="chat-content">
                        @messageContent
                        @if (!string.IsNullOrEmpty(messageThink))
                        {
                            <details>
                                <summary class="think-summary">Show Think Process</summary>
                                <div class="think-content">@messageThink</div>
                            </details>
                        }
                    </div>
                }
                else
                {
                    <details>
                        <summary class="think-summary">Tool Result</summary>
                        <div class="think-content">@functionResponse</div>
                        <div class="think-content">@functionCallId</div>
                    </details>
                }
            </div>
        }
    }
</div>

@if (estaCarregando)
{
    <div class="loading-container">
        <div class="loading-ring"></div>
    </div>
}

<div class="chat-input-container">
    <input type="text" @bind="perguntaUsuario" placeholder="Fale qualquer coisa..." class="chat-input" />
    <button @onclick="PerguntarAsync" type="submit" class="chat-button">Enviar</button>
</div>

@if (!string.IsNullOrEmpty(detalhesErro))
{
    <div class="error-container">
        <div class="error-title">Detalhes do Erro:</div>
        <div class="error-content">@detalhesErro</div>
    </div>
}

@code {
    private bool estaCarregando = false;
    private string perguntaUsuario = string.Empty;
    private string detalhesErro = string.Empty;
    private Microsoft.Extensions.AI.IChatClient? client;
    private string chaveApi = string.Empty;
    private string endpoint = string.Empty;
    private string nomeModelo = "llama3.2";
    private string modoClient = string.Empty;
    private IList<McpClientTool> tools = null!;
    [Inject] private IConfiguration Configuration { get; set; } = default!;
    [Inject] private ILogger<Program> Logger { get; set; } = default!;
    private IList<Microsoft.Extensions.AI.ChatMessage> mensagensChat = new List<Microsoft.Extensions.AI.ChatMessage>();

    protected override async Task OnInitializedAsync()
    {
        InicializarChat();

        // Lista as tools de um MCP Server
        tools = await McpClient.ListToolsAsync();
        
        mensagensChat.Add(new ChatMessage(ChatRole.System, "Você é um assistente prestativo. Você sempre responde usando texto e emojis. Você nunca gera HTML ou Markdown. Você só faz o que o usuário pedir para fazer. Se não tiver uma função para responder a uma pergunta, apenas responda a pergunta."));
    }

    private async Task PerguntarAsync(MouseEventArgs e)
    {
        try
        {
            estaCarregando = true;
            StateHasChanged();

            if (client == null)
            {
                Logger.LogInformation("Componente de chat não inicializado.");
                return;
            }

            Logger.LogInformation($"Adicionar pergunta do usuário: {perguntaUsuario}");
            mensagensChat.Add(new ChatMessage(ChatRole.User, perguntaUsuario));

            // Clear the userQuestion textbox
            perguntaUsuario = string.Empty;

            var response = await client.GetResponseAsync(mensagensChat, new() { Tools = [.. tools] });
            Logger.LogInformation($"Resposta do Modelo: {response}");
            mensagensChat.AddMessages(response);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro no processamento do Request");
            detalhesErro = ex.ToString();
        }
        finally
        {
            estaCarregando = false;
            StateHasChanged();
        }
    }

    private void InicializarChat()
    {
        try
        {
            Logger.LogInformation("Initializing Chat component");

            // read the settings from the configuration
            endpoint = Configuration["endpoint"] ?? throw new ArgumentNullException("Endpoint");
            chaveApi = Configuration["apikey"] ?? string.Empty;
            nomeModelo = Configuration["deploymentname"] ?? "llama3.2";

            Logger.LogInformation($"===================================================");
            Logger.LogInformation($"Chat info - Endpoint: {endpoint} - DeploymentName: {nomeModelo} - ApiKey length: {chaveApi.Length}");

            // check for localhost, that's mean ollama
            if (endpoint.Contains("localhost", StringComparison.OrdinalIgnoreCase))
            {
                modoClient = "Ollama";
                Logger.LogInformation("Using localhost endpoint - Ollama");
                var ollamaEndpoint = new Uri(endpoint);
                client = new OllamaChatClient(
                    endpoint: ollamaEndpoint,
                    modelId: nomeModelo)
                    .AsBuilder()
                    .UseFunctionInvocation()
                    .Build();
            }
            else
            {
                if (string.IsNullOrEmpty(chaveApi))
                {
                    modoClient = "Azure with Default Credentials";
                    Logger.LogInformation("Using DefaultAzureCredential");
                    client = new AzureOpenAIClient(
                        new Uri(endpoint),
                        new DefaultAzureCredential())
                        .AsChatClient(nomeModelo)
                        .AsBuilder()
                        .UseFunctionInvocation()
                        .Build();
                }
                else
                {
                    // Check if it's GitHub Models
                    if (endpoint.Contains("models.inference.ai.azure.com", StringComparison.OrdinalIgnoreCase))
                    {
                        modoClient = "GitHub Models";
                    }
                    else
                    {
                        modoClient = "Using Endpoint and ApiKey";
                    }

                    Logger.LogInformation("Using ApiKey");
                    var azureClient =
                        new Azure.AI.Inference.ChatCompletionsClient(
                        endpoint: new Uri(endpoint),
                        new AzureKeyCredential(chaveApi));
                    client = azureClient.AsIChatClient(nomeModelo)
                         .AsBuilder()
                         .UseFunctionInvocation()
                         .Build();     
                }
            }
            Logger.LogInformation($"===================================================");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred while initializing the chat component.");
            detalhesErro = ex.ToString();
        }
    }

}